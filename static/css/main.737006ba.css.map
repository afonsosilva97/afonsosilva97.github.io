{"version":3,"file":"static/css/main.737006ba.css","mappings":"4GAAA,KAKE,kCAAmC,CACnC,iCAAkC,CAJlC,mIAKF,CAEA,KACE,uEAEF,CCZA,gBAIE,mBADA,aAEA,8BAHA,eADA,UAIA,CACA,sBACE,gBAGA,sCAOE,6BAEA,SACA,eAPA,sBAGA,eAFA,WAIA,aANA,aADA,qBAIA,8BAKA,CACA,4CACE,UAGJ,uCACE,WC1BN,kBAKE,mBAFA,aACA,sBAFA,iBADA,UAIA,CAEA,qBACE,cACA,kBAGF,qBACE,gBACA,gBAGF,oBAKE,iBAEA,gBADA,kBALA,UAMA,CC8hBA,8CDriBF,oBAGI,YEpBN,kBAKE,mBAFA,aACA,sBAFA,eADA,UAIA,CACA,qBACE,cACA,kBAGF,+BAIE,cAHA,aACA,oCACA,cACA,CDuiBA,6CC3iBF,+BAMI,2BDqiBF,6CC3iBF,+BASI,2BDkiBF,8CC3iBF,+BAYI,+BAEF,sCAGE,mBAFA,aACA,sBAEA,kBACA,0CACE,eAEF,2CACE,gBAEF,wCACE,cCrCR,sBAKE,mBAFA,aACA,sBAFA,gBADA,UAIA,CACA,yBACE,cACA,kBAGF,kCAGE,mBADA,aADA,cAEA,CFwiBA,8CE3iBF,kCAKI,uBAEF,qDACE,SAEA,YADA,iBACA,CACA,yDACE,kBACA,kBAEF,mEAEE,gBACA,gBAFA,YAEA,CAEF,iEAEE,gBADA,kBACA,CAEF,0EAGE,sBAFA,eACA,QACA,CAGJ,0DACE,SAEA,YADA,qBACA,CACA,4DACE,cACA,mBC/CR,iBAKE,mBAFA,aACA,sBAFA,gBADA,UAIA,CACA,oBACE,cACA,kBAGF,0BACE,mBACA,4BAEE,cAEA,gBADA,mBAFA,UAGA,CHqiBF,8CGziBA,4BAMI,YCnBR,kBAME,mBAFA,aACA,sBAFA,mBADA,gBADA,UAKA,CACA,qBACE,eACA,iBAEF,qBACE,iBACA,gBJyiBA,6CI3iBF,qBAII,cJuiBF,6CI3iBF,qBAOI,gBJoiBF,8CI3iBF,qBAUI,kBAGJ,8BAEE,WADA,gBACA,CAEF,gCACE,gBACA,oCACE,cACA,YAGJ,uBACE,gBAEF,uBACE,UC3BJ,EACE,uBAGF,KACE,SAGA,kBADA,kBADA,SAEA,CAGF,SAEE,YACA,gBAFA,WAEA,CAGF,WAKE,mBAFA,aACA,sBAFA,YAIA,uBALA,UAKA,CAGF,aAGE,sBAEA,SADA,WAIA,eAPA,YACA,aAKA,qBADA,8BAEA,CACA,mBACE","sources":["index.css","styles/navbar.scss","styles/header.scss","styles/include-media.scss","styles/skills.scss","styles/experience.scss","styles/about.scss","styles/footer.scss","styles/mains.scss"],"sourcesContent":["body {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n    monospace;\r\n}\r\n",".navbar-wrapper {\r\n  width: 80vw;\r\n  margin-top: 8vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  .name {\r\n    font-weight: 600;\r\n  }\r\n  .links-wrapper {\r\n    button {\r\n      text-decoration: none;\r\n      padding: 10px;\r\n      font-family: 'Open Sans';\r\n      opacity: 0.6;\r\n      transition: all 0.2s ease-in-out;\r\n      font-size: 12px;\r\n      background-color: transparent;\r\n      outline: none;\r\n      border: 0px;\r\n      cursor: pointer;\r\n      &:hover {\r\n        opacity: 1;\r\n      }\r\n    }\r\n    .active {\r\n      color: black;\r\n    }\r\n  }\r\n}\r\n",".header-container {\r\n  width: 80vw;\r\n  margin-top: 7.5vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  h1 {\r\n    font-size: 3em;\r\n    line-height: 1.5em;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.5em;\r\n    overflow: hidden;\r\n  }\r\n\r\n  p {\r\n    width: 50vw;\r\n    @include media('>=phone', '<desktop') {\r\n      width: 80vw;\r\n    }\r\n    font-size: 1.12em;\r\n    text-align: center;\r\n    overflow: hidden;\r\n  }\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'lgphone': 425px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px,\r\n  'smdesktop': 1280px,\r\n  'mddesktop': 1440px,\r\n  'lgdesktop': 1920px,\r\n  '4k': 2560px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x':\r\n    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x':\r\n    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {\r\n  }\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {\r\n    }\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n        ($prefix == 'min' and $value > $no-media-breakpoint-value)\r\n      {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: (\r\n    '0': 0,\r\n    '1': 1,\r\n    '2': 2,\r\n    '3': 3,\r\n    '4': 4,\r\n    '5': 5,\r\n    '6': 6,\r\n    '7': 7,\r\n    '8': 8,\r\n    '9': 9,\r\n  );\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not(index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: (\r\n    'px': 1px,\r\n    'cm': 1cm,\r\n    'mm': 1mm,\r\n    '%': 1%,\r\n    'ch': 1ch,\r\n    'pc': 1pc,\r\n    'in': 1in,\r\n    'em': 1em,\r\n    'rem': 1rem,\r\n    'pt': 1pt,\r\n    'ex': 1ex,\r\n    'vw': 1vw,\r\n    'vh': 1vh,\r\n    'vmin': 1vmin,\r\n    'vmax': 1vmax,\r\n  );\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n  {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".skills-container {\r\n  width: 80vw;\r\n  margin-top: 8vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  h1 {\r\n    font-size: 3em;\r\n    line-height: 1.5em;\r\n  }\r\n\r\n  .skills-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    margin-top: 4vh;\r\n    grid-gap: 20px;\r\n    @include media('>=phone', '<lgphone') {\r\n      grid-template-columns: 1fr;\r\n    }\r\n    @include media('>=lgphone', '<tablet') {\r\n      grid-template-columns: 1fr;\r\n    }\r\n    @include media('>=tablet', '<desktop') {\r\n      grid-template-columns: 1fr 1fr;\r\n    }\r\n    .skill {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      text-align: center;\r\n      img {\r\n        height: 3.25rem;\r\n      }\r\n      span {\r\n        margin-top: 10px;\r\n      }\r\n      p {\r\n        font-size: 1em;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".experience-container {\r\n  width: 80vw;\r\n  margin-top: 10vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  h1 {\r\n    font-size: 3em;\r\n    line-height: 1.5em;\r\n  }\r\n\r\n  .experience {\r\n    margin-top: 3vh;\r\n    display: flex;\r\n    align-items: center;\r\n    @include media('>=phone', '<desktop') {\r\n      flex-direction: column;\r\n    }\r\n    .experience-header {\r\n      flex: 1;\r\n      text-align: center;\r\n      padding: 2vh;\r\n      img {\r\n        max-height: 3.5rem;\r\n        max-width: 12.5rem;\r\n      }\r\n      .company-name {\r\n        margin: 1.8vh;\r\n        font-size: 1.3em;\r\n        font-weight: bold;\r\n      }\r\n      .title-text {\r\n        margin-bottom: 0.6vh;\r\n        font-size: 1.1em;\r\n      }\r\n      .experience-duration {\r\n        font-size: 0.8em;\r\n        margin: 0;\r\n        color: rgba(0, 0, 0, 0.75);\r\n      }\r\n    }\r\n    .experience-description {\r\n      flex: 2;\r\n      vertical-align: middle;\r\n      padding: 2vh;\r\n      p {\r\n        font-size: 1em;\r\n        text-align: justify;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".about-container {\r\n  width: 80vw;\r\n  margin-top: 10vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  h1 {\r\n    font-size: 3em;\r\n    line-height: 1.5em;\r\n  }\r\n\r\n  .content {\r\n    align-items: center;\r\n    p {\r\n      width: 50vw;\r\n      font-size: 1em;\r\n      text-align: justify;\r\n      overflow: hidden;\r\n      @include media('>=phone', '<desktop') {\r\n        width: 80vw;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".footer-container {\r\n  width: 80vw;\r\n  margin-top: 10vh;\r\n  margin-bottom: 10vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 20px;\r\n  }\r\n  h2 {\r\n    font-size: 1.5rem;\r\n    overflow: hidden;\r\n    @include media('>=phone', '<lgphone') {\r\n      display: none;\r\n    }\r\n    @include media('>=lgphone', '<tablet') {\r\n      font-size: 14px;\r\n    }\r\n    @include media('>=tablet', '<desktop') {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n  .email-link {\r\n    font-size: 1.5rem;\r\n    color: black;\r\n  }\r\n  .social-icons {\r\n    margin-top: 15px;\r\n    img {\r\n      height: 2.2rem;\r\n      margin: 10px;\r\n    }\r\n  }\r\n  span {\r\n    margin-top: 10px;\r\n  }\r\n  icon {\r\n    color: red;\r\n  }\r\n}\r\n","@charset \"utf-8\";\r\n@import './include-media.scss';\r\n@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Open+Sans&display=swap');\r\n\r\n// Components\r\n@import './navbar.scss';\r\n@import './header.scss';\r\n@import './skills.scss';\r\n@import './experience.scss';\r\n@import './about.scss';\r\n@import './footer.scss';\r\n\r\n* {\r\n  font-family: 'Montserrat';\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow-y: scroll;\r\n  overflow-x: hidden;\r\n}\r\n\r\n.section {\r\n  width: 100vw;\r\n  height: auto;\r\n  overflow: hidden;\r\n}\r\n\r\n.container {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.primary-btn {\r\n  margin: 10px;\r\n  padding: 10px;\r\n  background-color: black;\r\n  color: white;\r\n  border: 0px;\r\n  transition: all 0.2s ease-in-out;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}